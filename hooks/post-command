#!/bin/bash

set -e
set -o pipefail
set -u

#
# State
#
declare -a TMP_FILES
declare CONTAINER_ID

#
# Defaults
#
BOOST_SCANNER_IMAGE=${BOOST_SCANNER_IMAGE:-227492184095.dkr.ecr.us-east-2.amazonaws.com/checks-runner}
BOOST_SCANNER_VERSION=${BOOST_SCANNER_VERSION:-latest}
VAR_PREFIX=BUILDKITE_PLUGIN_BOOST_SECURITY_SCANNER

#
# Helpers
#
container.stop ()
{
  if [ -n "${CONTAINER_ID:-}" ]; then
    docker stop "${CONTAINER_ID}" &>/dev/null || true
    unset CONTAINER_ID
  fi
}

env.list ()
{ awk 'BEGIN{for(v in ENVIRON) print v}'; }

env.list.params ()
{ env.list | grep "^${VAR_PREFIX}_"; }

env.list.boost ()
{ env.list | grep "^BOOST_"; }

tmp.create ()
{ # $1=label
  TMP_FILES+=($(mktemp -t boost-scanner.${1}.XXXXXX))
  tmp_file="${TMP_FILES[-1]}"
}

tmp.clean ()
{
  for file in "${TMP_FILES[@]:-}"; do
    if test -f "${file}"; then
      rm -f "${file}"
    fi
  done

  TMP_FILES=()
}

#
# Main
#
main.exit ()
{
  container.stop
  tmp.clean
}

main ()
{
  trap 'main.exit' EXIT

  #
  # Local vars
  #
  declare tmp_file

  #
  # Remap plugin parameters to BOOST_ environment vars
  #
  while read name; do
    declare "${name/${VAR_PREFIX}/BOOST}=${!name:-}"
  done < <(env.list.params)

  #
  # Define default values
  #
  declare BOOST_FAIL_ON_ERROR=${BOOST_FAIL_ON_ERROR:-"true"}
  declare BOOST_ORG_NAME=${BOOST_ORG_NAME:-${BUILDKITE_ORGANIZATION_SLUG:-}}
  declare BOOST_REPO_NAME=${BOOST_REPO_NAME:-${BUILDKITE_PIPELINE_SLUG:-}}
  declare BOOST_BRANCH_NAME=${BOOST_BRANCH_NAME:-${BUILDKITE_BRANCH:-}}

  #
  # Create docker env file
  #
  tmp.create env
  ENV_FILE="${tmp_file}"
  unset tmp_file

  while read name; do
    echo "${name}=${!name:-}" >> "${ENV_FILE}"
  done < <(env.list.boost)

  #
  # Build docker container
  #
  tmp.create cid
  CID_FILE="${tmp_file}"
  unset tmp_file

  rm -f "${CID_FILE}"

  declare -a CREATE_ARGS
  CREATE_ARGS=(create
    --cidfile "${CID_FILE}"
    --env-file "${ENV_FILE}"
    --entrypoint boost
    --rm ${BOOST_DOCKER_CREATE_ARGS:-}
    "${BOOST_SCANNER_IMAGE}:${BOOST_SCANNER_VERSION}"
  )

  CREATE_ARGS+=(scan ci "${BOOST_ORG_NAME}/${BOOST_REPO_NAME}")
  CREATE_ARGS+=("${BOOST_BRANCH_NAME}")

  declare headref=${BUILDKITE_COMMIT}
  declare baseref=${BUILDKITE_PULL_REQUEST_BASE_BRANCH:-}

  if [ -n "${baseref}" ]; then
    CREATE_ARGS+=("${baseref}..${headref}")
  else
    CREATE_ARGS+=("${headref}")
  fi

  if [ -n "${BUILDKITE_PIPELINE_DEFAULT_BRANCH:-}" ]; then
    CREATE_ARGS+=(--main-branch "${BUILDKITE_PIPELINE_DEFAULT_BRANCH}")
  fi

  if [ -n "${BUILDKITE_PULL_REQUEST:-}" ] &&
     [ "${BUILDKITE_PULL_REQUEST}" != "false" ];
  then
    CREATE_ARGS+=(--pull-request "${BUILDKITE_PULL_REQUEST}")
  fi

  CREATE_ARGS+=(${BOOST_ADDITIONAL_ARGS:-})

  #
  # Launch containers
  #
  docker "${CREATE_ARGS[@]}"
  # > /dev/null
  CONTAINER_ID=$(cat "${CID_FILE}")

  docker cp "${BUILDKITE_BUILD_CHECKOUT_PATH}/." "${CONTAINER_ID}:/app/mount/"

  if ! docker start --attach "${CONTAINER_ID}"; then
    if [ "${BOOST_FAIL_ON_ERROR}" == "true" ]; then
      exit 1
    fi
  fi
}

main
